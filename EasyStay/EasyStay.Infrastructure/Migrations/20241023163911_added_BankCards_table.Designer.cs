// <auto-generated />
using System;
using EasyStay.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyStay.Infrastructure.Migrations
{
    [DbContext(typeof(EasyStayDbContext))]
    [Migration("20241023163911_added_BankCards_table")]
    partial class added_BankCards_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyStay.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.BankCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("OwnerFullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankCards", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.BedInfo", b =>
                {
                    b.Property<long>("RoomVariantId")
                        .HasColumnType("bigint");

                    b.Property<int>("DoubleBedCount")
                        .HasColumnType("integer");

                    b.Property<int>("ExtraBedCount")
                        .HasColumnType("integer");

                    b.Property<int>("KingsizeBedCount")
                        .HasColumnType("integer");

                    b.Property<int>("SingleBedCount")
                        .HasColumnType("integer");

                    b.Property<int>("SofaCount")
                        .HasColumnType("integer");

                    b.HasKey("RoomVariantId");

                    b.ToTable("BedInfos", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Breakfast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Breakfasts", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealtorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("CustomerId", "RealtorId");

                    b.HasIndex("RealtorId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Citizenship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Citizenships", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.GuestInfo", b =>
                {
                    b.Property<long>("RoomVariantId")
                        .HasColumnType("bigint");

                    b.Property<int>("AdultCount")
                        .HasColumnType("integer");

                    b.Property<int>("ChildCount")
                        .HasColumnType("integer");

                    b.HasKey("RoomVariantId");

                    b.ToTable("GuestInfos", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ArrivalTimeUtcFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ArrivalTimeUtcTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DepartureTimeUtcFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DepartureTimeUtcTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("HotelCategoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("RealtorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("HotelCategoryId");

                    b.HasIndex("RealtorId");

                    b.ToTable("Hotels", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.HotelAmenity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("HotelAmenities", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.HotelBreakfast", b =>
                {
                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<long>("BreakfastId")
                        .HasColumnType("bigint");

                    b.HasKey("HotelId", "BreakfastId");

                    b.HasIndex("BreakfastId");

                    b.ToTable("HotelBreakfasts", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.HotelCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("HotelCategories", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.HotelHotelAmenity", b =>
                {
                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<long>("HotelAmenityId")
                        .HasColumnType("bigint");

                    b.HasKey("HotelId", "HotelAmenityId");

                    b.HasIndex("HotelAmenityId");

                    b.ToTable("HotelHotelAmenities", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.HotelPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelPhotos", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.HotelStaffLanguage", b =>
                {
                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.HasKey("HotelId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("HotelStaffLanguages", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RealtorReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("RealtorId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RealtorId");

                    b.ToTable("RealtorReviews", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RentalPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("RentalPeriods", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long>("RoomTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RoomAmenity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("RoomAmenities", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RoomRentalPeriod", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("RentalPeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("RoomId", "RentalPeriodId");

                    b.HasIndex("RentalPeriodId");

                    b.ToTable("RoomRentalPeriods", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RoomRoomAmenity", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoomAmenityId")
                        .HasColumnType("bigint");

                    b.HasKey("RoomId", "RoomAmenityId");

                    b.HasIndex("RoomAmenityId");

                    b.ToTable("RoomRoomAmenities", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.RoomVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomVariants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Admin", b =>
                {
                    b.HasBaseType("EasyStay.Domain.Identity.User");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Customer", b =>
                {
                    b.HasBaseType("EasyStay.Domain.Identity.User");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Realtor", b =>
                {
                    b.HasBaseType("EasyStay.Domain.Identity.User");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("CitizenshipId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.ToTable("Realtors", (string)null);
                });

            modelBuilder.Entity("EasyStay.Domain.Address", b =>
                {
                    b.HasOne("EasyStay.Domain.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EasyStay.Domain.BankCard", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.Customer", "Customer")
                        .WithMany("BankCards")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EasyStay.Domain.BedInfo", b =>
                {
                    b.HasOne("EasyStay.Domain.RoomVariant", "RoomVariant")
                        .WithOne("BedInfo")
                        .HasForeignKey("EasyStay.Domain.BedInfo", "RoomVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomVariant");
                });

            modelBuilder.Entity("EasyStay.Domain.Chat", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.Customer", "Customer")
                        .WithMany("Chats")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Identity.Realtor", "Realtor")
                        .WithMany("Chats")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("EasyStay.Domain.City", b =>
                {
                    b.HasOne("EasyStay.Domain.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EasyStay.Domain.GuestInfo", b =>
                {
                    b.HasOne("EasyStay.Domain.RoomVariant", "RoomVariant")
                        .WithOne("GuestInfo")
                        .HasForeignKey("EasyStay.Domain.GuestInfo", "RoomVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomVariant");
                });

            modelBuilder.Entity("EasyStay.Domain.Hotel", b =>
                {
                    b.HasOne("EasyStay.Domain.Address", "Address")
                        .WithOne("Hotel")
                        .HasForeignKey("EasyStay.Domain.Hotel", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.HotelCategory", "HotelCategory")
                        .WithMany("Hotels")
                        .HasForeignKey("HotelCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Identity.Realtor", "Realtor")
                        .WithMany("Hotels")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("HotelCategory");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("EasyStay.Domain.HotelBreakfast", b =>
                {
                    b.HasOne("EasyStay.Domain.Breakfast", "Breakfast")
                        .WithMany("HotelBreakfasts")
                        .HasForeignKey("BreakfastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Hotel", "Hotel")
                        .WithMany("HotelBreakfasts")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breakfast");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("EasyStay.Domain.HotelHotelAmenity", b =>
                {
                    b.HasOne("EasyStay.Domain.HotelAmenity", "HotelAmenity")
                        .WithMany("HotelHotelAmenities")
                        .HasForeignKey("HotelAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Hotel", "Hotel")
                        .WithMany("HotelHotelAmenities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("HotelAmenity");
                });

            modelBuilder.Entity("EasyStay.Domain.HotelPhoto", b =>
                {
                    b.HasOne("EasyStay.Domain.Hotel", "Hotel")
                        .WithMany("Photos")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("EasyStay.Domain.HotelStaffLanguage", b =>
                {
                    b.HasOne("EasyStay.Domain.Hotel", "Hotel")
                        .WithMany("HotelStaffLanguages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Language", "Language")
                        .WithMany("HotelStaffLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyStay.Domain.Message", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("EasyStay.Domain.RealtorReview", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.Customer", "Author")
                        .WithMany("RealtorReviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Identity.Realtor", "Realtor")
                        .WithMany("Reviews")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("EasyStay.Domain.Room", b =>
                {
                    b.HasOne("EasyStay.Domain.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("EasyStay.Domain.RoomRentalPeriod", b =>
                {
                    b.HasOne("EasyStay.Domain.RentalPeriod", "RentalPeriod")
                        .WithMany("RoomRentalPeriods")
                        .HasForeignKey("RentalPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Room", "Room")
                        .WithMany("RoomRentalPeriods")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalPeriod");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EasyStay.Domain.RoomRoomAmenity", b =>
                {
                    b.HasOne("EasyStay.Domain.RoomAmenity", "RoomAmenity")
                        .WithMany("RoomRoomAmenities")
                        .HasForeignKey("RoomAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyStay.Domain.Room", "Room")
                        .WithMany("RoomRoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("RoomAmenity");
                });

            modelBuilder.Entity("EasyStay.Domain.RoomVariant", b =>
                {
                    b.HasOne("EasyStay.Domain.Room", "Room")
                        .WithMany("RoomVariants")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Admin", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("EasyStay.Domain.Identity.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Customer", b =>
                {
                    b.HasOne("EasyStay.Domain.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("EasyStay.Domain.Identity.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Realtor", b =>
                {
                    b.HasOne("EasyStay.Domain.Citizenship", "Citizenship")
                        .WithMany("Realtors")
                        .HasForeignKey("CitizenshipId");

                    b.HasOne("EasyStay.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("EasyStay.Domain.Gender", "Gender")
                        .WithMany("Realtors")
                        .HasForeignKey("GenderId");

                    b.HasOne("EasyStay.Domain.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("EasyStay.Domain.Identity.Realtor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizenship");

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("EasyStay.Domain.Address", b =>
                {
                    b.Navigation("Hotel")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyStay.Domain.Breakfast", b =>
                {
                    b.Navigation("HotelBreakfasts");
                });

            modelBuilder.Entity("EasyStay.Domain.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("EasyStay.Domain.Citizenship", b =>
                {
                    b.Navigation("Realtors");
                });

            modelBuilder.Entity("EasyStay.Domain.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EasyStay.Domain.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("EasyStay.Domain.Gender", b =>
                {
                    b.Navigation("Realtors");
                });

            modelBuilder.Entity("EasyStay.Domain.Hotel", b =>
                {
                    b.Navigation("HotelBreakfasts");

                    b.Navigation("HotelHotelAmenities");

                    b.Navigation("HotelStaffLanguages");

                    b.Navigation("Photos");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EasyStay.Domain.HotelAmenity", b =>
                {
                    b.Navigation("HotelHotelAmenities");
                });

            modelBuilder.Entity("EasyStay.Domain.HotelCategory", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EasyStay.Domain.Language", b =>
                {
                    b.Navigation("HotelStaffLanguages");
                });

            modelBuilder.Entity("EasyStay.Domain.RentalPeriod", b =>
                {
                    b.Navigation("RoomRentalPeriods");
                });

            modelBuilder.Entity("EasyStay.Domain.Room", b =>
                {
                    b.Navigation("RoomRentalPeriods");

                    b.Navigation("RoomRoomAmenities");

                    b.Navigation("RoomVariants");
                });

            modelBuilder.Entity("EasyStay.Domain.RoomAmenity", b =>
                {
                    b.Navigation("RoomRoomAmenities");
                });

            modelBuilder.Entity("EasyStay.Domain.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EasyStay.Domain.RoomVariant", b =>
                {
                    b.Navigation("BedInfo")
                        .IsRequired();

                    b.Navigation("GuestInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Customer", b =>
                {
                    b.Navigation("BankCards");

                    b.Navigation("Chats");

                    b.Navigation("RealtorReviews");
                });

            modelBuilder.Entity("EasyStay.Domain.Identity.Realtor", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Hotels");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
